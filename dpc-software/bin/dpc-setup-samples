#!/usr/bin/perl
# dpc-setup-samples - copy samples to base dir
# DPC System (c) Vlado Keselj 2010-2020 last update: 2020-10-29
use strict;

$|=1;
# creating initial directories, let umask decide about permissions
print "Creating directories.\n";
for my $d (qw(
  templates images db
)) { -d $d or mkdir $d, 0777; }

my $cntcp=0; my $cntex=0; my $cnter=0;
for my $f (qw(
  dpc-software/samples/configuration.pl
  dpc-software/samples/index.cgi
  dpc-software/samples/login.cgi
  dpc-software/samples/logout.cgi
  dpc-software/samples/clarifications.cgi
  dpc-software/samples/codeview.cgi
  dpc-software/samples/contest.cgi
  dpc-software/samples/problems.cgi
  dpc-software/samples/refs.cgi
  dpc-software/samples/feedbackview.cgi
  dpc-software/samples/scoreboard.cgi
  dpc-software/samples/adminview.cgi
  dpc-software/samples/allsubmissions.cgi
  dpc-software/samples/scoreboard-admin.cgi
  dpc-software/samples/style-dpc-3.css
  dpc-software/samples/templates/dpc-3.html.sfish
  dpc-software/samples/images/dpc-logo2.png
  dpc-software/samples/db/users.db
  dpc-software/samples/db/passwords
)) {
  my $f1 = $f; $f1 =~ s/^dpc-software\/samples\///;
  if (-e $f1) { print "$f1 exists\n"; ++$cntex; next; }
  if ($f1 eq 'db/passwords') { &cp_passwords($f,$f1) }
  else {
    my $c="cp $f $f1"; print "$c\n";
    if (system($c)==0) { $cntcp++; } else { print "error: $?\n"; $cnter++; }}
}
if (-d 'problems') { print "problems/ exists\n"; }
else {
  for my $d (qw(problems problems/data-judging problems/data-sample
		problems/descriptions problems/solutions )) {
    -d $d or mkdir $d, 0777; }
  for my $f (qw(
    dpc-software/samples/problems/data-judging/A.in
    dpc-software/samples/problems/data-judging/A.out
    dpc-software/samples/problems/data-judging/Aj.in
    dpc-software/samples/problems/data-judging/Aj.out
    dpc-software/samples/problems/data-judging/B.in
    dpc-software/samples/problems/data-judging/B.out
    dpc-software/samples/problems/data-judging/Bj.in
    dpc-software/samples/problems/data-judging/Bj.out
    dpc-software/samples/problems/data-judging/C.in
    dpc-software/samples/problems/data-judging/C.out
    dpc-software/samples/problems/data-judging/Cj.in
    dpc-software/samples/problems/data-judging/Cj.out
    dpc-software/samples/problems/data-sample/A.in
    dpc-software/samples/problems/data-sample/A.out
    dpc-software/samples/problems/data-sample/B.in
    dpc-software/samples/problems/data-sample/B.out
    dpc-software/samples/problems/data-sample/C.in
    dpc-software/samples/problems/data-sample/C.out
    dpc-software/samples/problems/descriptions/A.meta
    dpc-software/samples/problems/descriptions/A.pdf
    dpc-software/samples/problems/descriptions/B.meta
    dpc-software/samples/problems/descriptions/B.pdf
    dpc-software/samples/problems/descriptions/C.meta
    dpc-software/samples/problems/descriptions/C.pdf
    dpc-software/samples/problems/solutions/A.c
    dpc-software/samples/problems/solutions/B.c
    dpc-software/samples/problems/solutions/C.c
  )) {
    my $f1 = $f; $f1 =~ s/^dpc-software\/samples\///;  
    my $c="cp $f $f1"; print "$c\n";
    if (system($c)==0) { $cntcp++; } else { print "error: $?\n"; $cnter++; }}
}

print "\n";
if ($cntcp>0) { print "Copied $cntcp files\n" }
if ($cntex>0) { print "$cntex files exist and were not copied.\n".
  "You must remove them to be replaced with samples.\n".
  "Directory problems/ must be removed to copy problems sample files\n";
}
if ($cnter>0) { print "Errors in $cnter files!\n" }

# Some basic permissions setup, more elaborate setup is in other commands
print "\nSetting up some basic permissions:\n";
my $c = 'chmod u+x dpc-software/bin/dpc-setup-samples
chmod a+x . images
chmod a+r style-dpc-3.css images/dpc-logo2.png
';
print $c; print `$c`;

sub cp_passwords{
  my $f=shift; my $f1=shift;
  print "Copy and generate passwords:\n$f -> $f1\n";
  my $fc = &getfile($f); my $fc1;
  while ($fc =~ /\b(random-\S+)/) { $fc1.=$`.&random_string; $fc = $'; }
  $fc1 .= $fc; &putfile($f1,$fc1)
}

# generate random string of given length
sub random_string {
  my $n = shift; $n = 8 unless $n > 0; my $c = shift;
  my @chars = (0..9, 'a'..'z', 'A'..'Z');
  if ($c eq 'd') { @chars = (0..9) }
  return join('', map { $chars[rand($#chars+1)] } (1..$n));
}

sub getfile($) {
    my $f = shift;
    local *F;
    open(F, "<$f") or die "getfile:cannot open $f:$!";
    my @r = <F>;
    close(F);
    return wantarray ? @r : join ('', @r);
}

sub putfile($@) {
    my $f = shift;
    local *F;
    open(F, ">$f") or die "putfile:cannot open $f:$!";
    print F '' unless @_;
    while (@_) { print F shift(@_) }
    close(F);
}
